version: "3.7"

services:

    reverse-proxy:
        image: "jwilder/nginx-proxy:latest"
        container_name: "reverse-proxy"
        volumes:
            - "conf:/etc/nginx/conf.d"
            - "html:/usr/share/nginx/html"
            - "dhparam:/etc/nginx/dhparam"
            - "vhost:/etc/nginx/vhost.d"
            - "certs:/etc/nginx/certs"
            - "/run/docker.sock:/tmp/docker.sock:ro"
        restart: "always"
        networks:
            net:
                aliases:
                    - ${DOMAINNAME}
                    - nitter.${DOMAINNAME}
                    - bibliogram.${DOMAINNAME}
                    - teddit.${DOMAINNAME}
                    - freshrss.${DOMAINNAME}
                    - invidious.${DOMAINNAME}
                    - searx.${DOMAINNAME}
                    - pihole.${DOMAINNAME}
                    - agendav.${DOMAINNAME}
        environment:
          DEFAULT_HOST: pihole.${DOMAINNAME}

        ports:
            - "80:80"
            #- "443:443"
            #- "53:53"
    letsencrypt:
        image: "jrcs/letsencrypt-nginx-proxy-companion:latest"
        container_name: "letsencrypt-helper"
        volumes:
            - "html:/usr/share/nginx/html"
            - "dhparam:/etc/nginx/dhparam"
            - "vhost:/etc/nginx/vhost.d"
            - "certs:/etc/nginx/certs"
            - "/run/docker.sock:/var/run/docker.sock:ro"
            - "acme:/etc/acme.sh"
        environment:
            NGINX_PROXY_CONTAINER: "reverse-proxy"
            DEFAULT_EMAIL: "user@domain.com"
        restart: "always"
        depends_on:
            - "reverse-proxy"
            - "pihole"
            - "invidious"
            - "bibliogram"
            - "teddit"
            - "nitter"
            - "freshrss-app"
        networks: 
            - "net"
        dns: ${IPADDR}

    pihole:
        image: pihole/pihole:latest
        ports:
            - '${IPADDR}:53:53/tcp'
            - '${IPADDR}:53:53/udp'
            - '8053:80/tcp'
            - "4430:443/tcp"
        volumes:
            - './etc-pihole/:/etc/pihole/:z'
            - './etc-dnsmasq.d/:/etc/dnsmasq.d/:z'
        # run `touch ./var-log/pihole.log` first unless you like errors
        # - './var-log/pihole.log:/var/log/pihole.log'
        # Recommended but not required (DHCP needs NET_ADMIN)
        #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
        environment:
            VIRTUAL_HOST: pihole.${DOMAINNAME}
              # LAN hostnames for other docker containers using jwilder
        extra_hosts:
            - 'nitter nitter.${DOMAINNAME}:${IPADDR}'
            - 'bibliogram bibliogram.${DOMAINNAME}:${IPADDR}'
            - 'teddit teddit.${DOMAINNAME}:${IPADDR}'
            - 'freshrss freshrss.${DOMAINNAME}:${IPADDR}'
            - 'invidious invidious.${DOMAINNAME}:${IPADDR}'
            - 'searx searx.${DOMAINNAME}:${IPADDR}'
            - 'pihole pihole.${DOMAINNAME}:${IPADDR}'
            - 'agendav agendav.${DOMAINNAME}:${IPADDR}'
            - 'default ${DOMAINNAME}:${IPADDR}'
            - 'restyaboard restya.${DOMAINNAME}:${IPADDR}'
        restart: always
        networks:
            - 'net'


    
    redis:
        image: redis:6.0.9-alpine3.12
        command: redis-server
        environment:
            - REDIS_REPLICATION_MODE=master
        ports:
            - "6379:6379"
        networks:
            - net
        depends_on:
            - 'pihole'
    teddit:
        build: teddit/
        environment:
            - REDIS_HOST=redis
            - VIRTUAL_HOST=teddit.${DOMAINNAME}
            - LETSENCRYPT_HOST=teddit.${DOMAINNAME}
        ports:
            - 8081:8080
        networks:
            - net
        depends_on:
            - redis
            - 'pihole'

    freshrss-db:
        image: postgres:12-alpine
        container_name: freshrss-db
        hostname: freshrss-db
        restart: unless-stopped
        volumes:
            - db:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: freshrss
            POSTGRES_PASSWORD: freshrss
            POSTGRES_DB: freshrss
        networks:
            net:
    
    freshrss-app:
        image: freshrss/freshrss:latest
        container_name: freshrss-app
        hostname: freshrss-app
        restart: unless-stopped
        ports:
            - "8080:80"
        depends_on:
            - freshrss-db
        volumes:
            - data:/var/www/FreshRSS/data
            - extensions:/var/www/FreshRSS/extensions
        environment:
            CRON_MIN: '*/20'
            VIRTUAL_HOST: freshrss.${DOMAINNAME}
            LETSENCRYPT_HOST: freshrss.${DOMAINNAME}
        networks:
            net:
        depends_on:
            - 'pihole'

    bibliogram:
        image: cloudrac3r/bibliogram
        volumes:
            - db:/app/db
        ports:
            - 10407:10407
        restart: unless-stopped
        networks: 
            - "net"
        environment:
            VIRTUAL_HOST: bibliogram.${DOMAINNAME}
            LETSENCRYPT_HOST: bibliogram.${DOMAINNAME}
        depends_on:
            - 'pihole'

    postgres:
        image: postgres:10
        restart: unless-stopped
        networks:
            net:
        volumes:
            - postgresdata:/var/lib/postgresql/data
            - ./config/sql:/config/sql
            - ./docker/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh
        environment:
            POSTGRES_DB: invidious
            POSTGRES_PASSWORD: kemal
            POSTGRES_USER: kemal
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "postgres"]
        depends_on:
            - 'pihole'

    invidious:
        build:
            context: ./invidious
            dockerfile: docker/Dockerfile
        restart: unless-stopped
        networks:
            net:
        ports:
            - "0.0.0.0:3000:3000"
        environment:
            # Adapted from ./config/config.yml
          VIRTUAL_HOST: "invidious.${DOMAINNAME}"
          LETSENCRYPT_HOST: "invidious.${DOMAINNAME}"
          INVIDIOUS_CONFIG: |
            channel_threads: 1
            check_tables: true
            feed_threads: 1
            db:
                user: kemal
                password: kemal
                host: postgres
                port: 5432
                dbname: invidious
            full_refresh: false
            https_only: false
            domain:
        depends_on:
            - postgres
            - 'pihole'

    redis-alpine:
        image: redis:6-alpine
        restart: unless-stopped
        volumes:
            - redis-data:/var/lib/redis
        networks:
            - net

    nitter:
        build:
            context: nitter/
            dockerfile: Dockerfile
        volumes:
            - ./nitter/nitter.conf:/src/nitter.conf
        hostname: nitter.${DOMAINNAME}
        environment:
            VIRTUAL_HOST: nitter.${DOMAINNAME}
            LETSENCRYPT_HOST: nitter.${DOMAINNAME}
            VIRTUAL_PORT: 8082
        ports:
            - 8082:8082
        networks:
            - net
        depends_on:
            - redis-alpine
            - 'pihole'

    searx:
        image: searx/searx
        environment:
            VIRTUAL_HOST: searx.${DOMAINNAME}
            LETSENCRYPT_HOST: searx.${DOMAINNAME}
        ports:
            - 8083:8080
        networks:
            - net
        depends_on:
            - 'pihole'

    restyaboard:
     image: restyaplatform/restyaboard:dev
     ports:
       - 1234:80
     volumes:
       - /var/opt/restya/media:/var/lib/nginx/html/media
     environment:
       - POSTGRES_HOST=restpostgres
       - POSTGRES_PORT=5432
       - POSTGRES_ADMIN_USER=postgres
       - POSTGRES_ADMIN_PASS=admin
       - RESTYA_DB_USERNAME=restya
       - RESTYA_DB_USERPASS=restya
       - VIRTUAL_HOST=restya.${DOMAINNAME}
       - LETSENCRYPT_HOST=restya.${DOMAINNAME}
       - VIRTUAL_PORT=1234
      #- RESTYA_DB=restyaboard
      #- SMTP_SERVER=smtp_relay
      #- SMTP_PORT=587
      #- TZ=Etc/UTC
     depends_on:
       - restpostgres
       - pihole
     restart: always
     networks:
       - net

  # See https://hub.docker.com/r/boky/postfix for documentation
  # or try https://github.com/WeAreGenki/docker-smtp
    smtp_relay:
      image: boky/postfix
      environment:
        - RELAYHOST=127.0.0.1:1587
        - ALLOW_EMPTY_SENDER_DOMAINS=true
      networks:
        - net

    restpostgres:
     image: postgres:12-alpine
     volumes:
       - /var/opt/restya/data:/var/lib/postgresql/data
     environment:
       - POSTGRES_USER=postgres
       - POSTGRES_PASSWORD=admin
     restart: always
     networks:
       - net

    
volumes:
  certs:
  html:
  vhost:
  dhparam:
  db: 
  data: 
  extensions:
  postgresdata:
  redis-data:
  acme:
  conf:

networks:
  net:
    external: true
